package es.ehu.si.ixa.pipe.nerc.features;

import es.ehu.si.ixa.pipe.nerc.NameFinder;

import java.util.List;

import opennlp.tools.util.Span;
import opennlp.tools.util.featuregen.FeatureGeneratorAdapter;

/**
 * Generates features if the tokens are recognized by the provided
 * {@link NameFinder} finder
 */
public class InSpanGenerator extends FeatureGeneratorAdapter {

  private final String prefix;
  private final NameFinder finder;
  private String[] currentSentence;
  private Span[] currentNames;

  /**
   * Initializes the current instance. 
   *
   * @param prefix the prefix is used to distinguish the generated features
   * from features generated by other instances of {@link InSpanGenerator}s.
   * @param finder the {@link TokenNameFinder} used to detect the names.
   */
  public InSpanGenerator(String prefix, NameFinder finder) {
    
    if (prefix == null) 
        throw new IllegalArgumentException("prefix must not be null!");
    
    this.prefix = prefix;
    
    if (finder == null)
        throw new IllegalArgumentException("finder must not be null!");
    
    this.finder = finder;
  }

  public void createFeatures(List<String> features, String[] tokens, int index,
        String[] preds) {
    // cache results for sentence
    if (currentSentence != tokens) {
      currentSentence = tokens;
      List<Span> namesList = finder.nercToSpans(tokens);
      currentNames = namesList.toArray(new Span[namesList.size()]);
    }

    // iterate over names and check if a span is contained
    for (Span currentName : currentNames) {
      if (currentName.contains(index)) {
        // found a span for the current token
        features.add(prefix + ":w=dic");
        features.add(prefix + ":w=dic=" + tokens[index]);

        // TODO: consider generation start and continuation features

        break;
      }
    }
  }
}
